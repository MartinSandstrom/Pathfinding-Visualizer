{"version":3,"sources":["Components/GridNode.jsx","algoritms/dijkstra.js","helpers/helper.js","DOM/htmlAnimations.js","Components/Grid.jsx","algoritms/astar.js","algoritms/algoHelpers.js","App.js","serviceWorker.js","index.js"],"names":["GridNode","isFinish","isStart","isWall","row","col","onMouseDown","onMouseEnter","onMouseUp","custom","id","className","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","getInitialGrid","currentRow","createNode","Infinity","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","document","getElementById","ALGOS","dijkstra","startNode","finishNode","visitedNodesInOrder","nodes","getAllNodes","closestNode","shift","astar","allNodes","visited","Grid","state","algo","isAddingWalls","componentDidMount","setState","visualize","algorithm","animateHtml","currentNode","unshift","getNodesInShortestPathOrder","alert","markAsWall","this","value","onChange","e","target","onClick","style","width","map","rowIdx","key","nodeIdx","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5661d2c7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GridNode = ({\n    isFinish,\n    isStart,\n    isWall,\n    row,\n    col,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp\n}) => {\n    const custom = isStart ? \"start-node\" : isFinish ? \"end-node\" : \"\";\n    return (\n        <div\n            onMouseDown={() => onMouseDown({ row, col })}\n            onMouseEnter={() => onMouseEnter({ row, col })}\n            onMouseUp={() => onMouseUp({ row, col })}\n            id={`node-${row}-${col}`}\n            className={`node ${custom} ${isWall ? \" node-wall\" : \"\"}`}\n        >\n            {\" \"}\n            {isStart ? \"S\" : isFinish ? \"E\" : \"\"}\n        </div>\n    );\n};\n\nexport default GridNode;\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) {\n            return visitedNodesInOrder;\n        }\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) {\n            return visitedNodesInOrder;\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n","export const START_NODE_ROW = 5;\nexport const START_NODE_COL = 15;\nexport const FINISH_NODE_ROW = 10;\nexport const FINISH_NODE_COL = 20;\n\nexport const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 25; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 25; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n    };\n};\n","const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className +=\n                \" node-shortest-path\";\n        }, 10 * i);\n    }\n};\n\nexport function animateHtml(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                animateShortestPath(nodesInShortestPathOrder);\n            }, 50 * i);\n            return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className +=\n                \" node-visited\";\n        }, 50 * i);\n    }\n}\n","import React from \"react\";\nimport \"./Grid.css\";\n\nimport GridNode from \"./GridNode\";\nimport { dijkstra } from \"../algoritms/dijkstra\";\nimport { astar } from \"../algoritms/astar\";\n\nimport {\n    getInitialGrid,\n    START_NODE_ROW,\n    START_NODE_COL,\n    FINISH_NODE_ROW,\n    FINISH_NODE_COL\n} from \"../helpers/helper\";\nimport { animateHtml } from \"../DOM/htmlAnimations\";\nimport { getNodesInShortestPathOrder } from \"../algoritms/algoHelpers\";\n\nconst ALGOS = {\n    dijkstra: dijkstra,\n    astar: astar\n};\n\nexport default class Grid extends React.Component {\n    state = {\n        grid: [],\n        algo: \"dijkstra\",\n        isAddingWalls: false\n    };\n\n    componentDidMount = () => {\n        const grid = getInitialGrid();\n        this.setState({ grid });\n    };\n\n    visualize = () => {\n        const { grid, algo } = this.state;\n        const algorithm = ALGOS[algo];\n        if (!algorithm) {\n            alert(`${algorithm} not implemented yet`);\n            return;\n        }\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = algorithm(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\n            finishNode\n        );\n        animateHtml(visitedNodesInOrder, nodesInShortestPathOrder);\n    };\n\n    markAsWall = ({ row, col }) => {\n        const { grid } = this.state;\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ grid });\n    };\n\n    onMouseDown = ({ row, col }) => {\n        const { grid } = this.state;\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ isAddingWalls: true, grid });\n    };\n\n    onMouseEnter = ({ row, col }) => {\n        const { grid, isAddingWalls } = this.state;\n        if (!isAddingWalls) {\n            return;\n        }\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ isAddingWalls: true, grid });\n    };\n\n    onMouseUp = () => {\n        this.setState({ isAddingWalls: false });\n    };\n\n    render() {\n        const { grid } = this.state;\n        return (\n            <div>\n                <select\n                    value={this.state.algo}\n                    onChange={e => this.setState({ algo: e.target.value })}\n                >\n                    <option value=\"dijkstra\">Dijkstra</option>\n                    <option value=\"astar\">astar</option>\n                </select>\n\n                <div>\n                    <button onClick={this.visualize}>Find shortest path</button>\n                </div>\n                <div style={{ width: 750 }}>\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {\n                                        row,\n                                        col,\n                                        isFinish,\n                                        isStart,\n                                        isWall\n                                    } = node;\n                                    return (\n                                        <GridNode\n                                            onMouseDown={this.onMouseDown}\n                                            onMouseEnter={this.onMouseEnter}\n                                            onMouseUp={this.onMouseUp}\n                                            isWall={isWall}\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            row={row}\n                                        ></GridNode>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n","export function astar(grid, startNode, finishNode) {\n    const allNodes = getAllNodes(grid);\n    const visited = [];\n    for (let i = 1; i < allNodes.length; i++) {\n        const node = allNodes[i];\n        if (node === finishNode) {\n            return visited;\n        } else {\n            visited.push(node);\n        }\n    }\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n","// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"./Components/Grid\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>Pathfinder :)</p>\n                <Grid algo=\"test\"></Grid>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}