{"version":3,"sources":["Components/GridNode.jsx","algoritms/dijkstra.js","helpers/helper.js","DOM/htmlAnimations.js","Components/Grid.jsx","algoritms/astar.js","algoritms/algoHelpers.js","algoritms/sorting/merge.js","algoritms/sorting/selection.js","Components/SortingAlgos.jsx","algoritms/sorting/bubble.js","algoritms/sorting/quicksort.js","App.js","serviceWorker.js","index.js"],"names":["GridNode","isFinish","isStart","isWall","row","col","onMouseDown","onMouseEnter","onMouseUp","custom","id","className","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","getInitialGrid","currentRow","createNode","Infinity","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","document","getElementById","ALGOS","dijkstra","startNode","finishNode","visitedNodesInOrder","nodes","getAllNodes","closestNode","shift","astar","Grid","state","algo","isAddingWalls","componentDidMount","setState","visualize","algorithm","animateHtml","currentNode","unshift","getNodesInShortestPathOrder","alert","markAsWall","this","value","onChange","e","target","onClick","style","width","map","rowIdx","key","nodeIdx","React","Component","merger","left","right","arr","bubble","array","allArrays","keepSwapping","temp","quick","quickSort","allParts","sorted","pivot","pop","smallerThanArray","largerThanArray","forEach","n","prevObj","largObj","merge","mergeSort","merged","splice","leftM","arrayM","leftMArray","arrayMArray","selection","all","min","j","ANIMATION_STEP_TIME","SortingAlgos","list","sorting","randomNumbers","max","number","Math","ceil","floor","random","done","sortWithOneList","sortWithPivot","allSorts","animateSort","index","stopSorting","color","join","PathFinder","SortingAlgorithms","App","position","top","listStyle","to","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3edafa4a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GridNode = ({\n    isFinish,\n    isStart,\n    isWall,\n    row,\n    col,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp\n}) => {\n    const custom = isStart ? \"start-node\" : isFinish ? \"end-node\" : \"\";\n    return (\n        <div\n            onMouseDown={() => onMouseDown({ row, col })}\n            onMouseEnter={() => onMouseEnter({ row, col })}\n            onMouseUp={() => onMouseUp({ row, col })}\n            id={`node-${row}-${col}`}\n            className={`node ${custom} ${isWall ? \" node-wall\" : \"\"}`}\n        >\n            {\" \"}\n            {isStart ? \"S\" : isFinish ? \"E\" : \"\"}\n        </div>\n    );\n};\n\nexport default GridNode;\n","export function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n\n        if (closestNode.isWall) continue;\n\n        if (closestNode.distance === Infinity) {\n            return visitedNodesInOrder;\n        }\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) {\n            return visitedNodesInOrder;\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n","export const START_NODE_ROW = 5;\nexport const START_NODE_COL = 15;\nexport const FINISH_NODE_ROW = 10;\nexport const FINISH_NODE_COL = 20;\n\nexport const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 25; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 25; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n    };\n};\n","const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className +=\n                \" node-shortest-path\";\n        }, 10 * i);\n    }\n};\n\nexport function animateHtml(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                animateShortestPath(nodesInShortestPathOrder);\n            }, 50 * i);\n            return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className +=\n                \" node-visited\";\n        }, 50 * i);\n    }\n}\n","import React from \"react\";\nimport \"./Grid.css\";\n\nimport GridNode from \"./GridNode\";\nimport { dijkstra } from \"../algoritms/dijkstra\";\nimport { astar } from \"../algoritms/astar\";\n\nimport {\n    getInitialGrid,\n    START_NODE_ROW,\n    START_NODE_COL,\n    FINISH_NODE_ROW,\n    FINISH_NODE_COL\n} from \"../helpers/helper\";\nimport { animateHtml } from \"../DOM/htmlAnimations\";\nimport { getNodesInShortestPathOrder } from \"../algoritms/algoHelpers\";\n\nconst ALGOS = {\n    dijkstra: dijkstra,\n    astar: astar\n};\n\nexport default class Grid extends React.Component {\n    state = {\n        grid: [],\n        algo: \"dijkstra\",\n        isAddingWalls: false\n    };\n\n    componentDidMount = () => {\n        const grid = getInitialGrid();\n        this.setState({ grid });\n    };\n\n    visualize = () => {\n        const { grid, algo } = this.state;\n        const algorithm = ALGOS[algo];\n        if (!algorithm) {\n            alert(`${algorithm} not implemented yet`);\n            return;\n        }\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = algorithm(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\n            finishNode\n        );\n        animateHtml(visitedNodesInOrder, nodesInShortestPathOrder);\n    };\n\n    markAsWall = ({ row, col }) => {\n        const { grid } = this.state;\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ grid });\n    };\n\n    onMouseDown = ({ row, col }) => {\n        const { grid } = this.state;\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ isAddingWalls: true, grid });\n    };\n\n    onMouseEnter = ({ row, col }) => {\n        const { grid, isAddingWalls } = this.state;\n        if (!isAddingWalls) {\n            return;\n        }\n        grid[row][col].isWall = !grid[row][col].isWall;\n        this.setState({ isAddingWalls: true, grid });\n    };\n\n    onMouseUp = () => {\n        this.setState({ isAddingWalls: false });\n    };\n\n    render() {\n        const { grid } = this.state;\n        return (\n            <div>\n                <select\n                    value={this.state.algo}\n                    onChange={e => this.setState({ algo: e.target.value })}\n                >\n                    <option value=\"dijkstra\">Dijkstra</option>\n                    <option value=\"astar\">astar</option>\n                </select>\n\n                <div>\n                    <button onClick={this.visualize}>Find shortest path</button>\n                </div>\n                <div style={{ width: 750 }}>\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {\n                                        row,\n                                        col,\n                                        isFinish,\n                                        isStart,\n                                        isWall\n                                    } = node;\n                                    return (\n                                        <GridNode\n                                            onMouseDown={this.onMouseDown}\n                                            onMouseEnter={this.onMouseEnter}\n                                            onMouseUp={this.onMouseUp}\n                                            isWall={isWall}\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            row={row}\n                                        ></GridNode>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n","export function astar(grid, startNode, finishNode) {\n    const allNodes = getAllNodes(grid);\n    const visited = [];\n    return [];\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n","export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","export const mergeSort = (array, allParts = []) => {\n    if (array.length < 2) {\n        return { merged: [...array], allParts };\n    }\n\n    const left = array.splice(0, array.length / 2);\n\n    const leftM = mergeSort(left, allParts);\n    const arrayM = mergeSort(array, allParts);\n\n    const leftMArray = leftM.merged;\n    const arrayMArray = arrayM.merged;\n\n    const merged = merger([...leftMArray], [...arrayMArray]);\n\n    allParts.push(merged);\n\n    return { merged: merged, allParts };\n};\n\nfunction merger(left, right) {\n    const arr = [];\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            arr.push(left.shift());\n        } else {\n            arr.push(right.shift());\n        }\n    }\n    return [...arr, ...left, ...right];\n}\n","export const selectionSort = array => {\n    const all = [];\n\n    for (let i = 0; i < array.length; i++) {\n        let min = i;\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[j] < array[min]) {\n                min = j;\n            }\n        }\n        if (min > i) {\n            let temp = array[i];\n            array[i] = array[min];\n            array[min] = temp;\n        }\n        all.push([...array]);\n    }\n\n    return all;\n};\n","import React from \"react\";\nimport { bubbleSort } from \"../algoritms/sorting/bubble\";\nimport { quickSort } from \"../algoritms/sorting/quicksort\";\nimport { mergeSort } from \"../algoritms/sorting/merge\";\nimport { selectionSort } from \"../algoritms/sorting/selection\";\n\nconst ALGOS = {\n    bubble: bubbleSort,\n    quick: quickSort,\n    merge: mergeSort,\n    selection: selectionSort\n};\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nconst ANIMATION_STEP_TIME = 300;\n\nexport default class SortingAlgos extends React.Component {\n    state = {\n        list: [],\n        algo: \"bubble\",\n        sorting: false\n    };\n\n    componentDidMount = () => this.randomNumbers();\n\n    randomNumbers = () => {\n        const list = [];\n        for (let i = 0; i < 10; i++) {\n            const number = getRandomInt(0, 99);\n            list.push(number);\n        }\n        this.setState({ list, done: false });\n    };\n\n    sort = () => {\n        const { algo, list } = this.state;\n        const algorithm = ALGOS[algo];\n        this.setState({ sorting: true });\n        if (algo === \"bubble\" || algo === \"selection\") {\n            this.sortWithOneList(algorithm, list);\n        } else if (algo === \"quick\" || algo === \"merge\") {\n            this.sortWithPivot(algorithm, list);\n        }\n    };\n\n    sortWithPivot = (algorithm, list) => {\n        const allSorts = algorithm(list);\n        this.animateSort(allSorts.allParts);\n    };\n\n    sortWithOneList = (algorithm, list) => {\n        const allSorts = algorithm(list);\n        this.animateSort(allSorts);\n    };\n\n    animateSort = list => {\n        list.forEach((sort, index) => {\n            setTimeout(() => {\n                this.setState({ list: sort });\n            }, ANIMATION_STEP_TIME * index);\n        });\n        this.stopSorting(list.length);\n    };\n\n    stopSorting = length => {\n        setTimeout(() => {\n            this.setState({ sorting: false, done: true });\n        }, length * ANIMATION_STEP_TIME);\n    };\n\n    render() {\n        const { list, sorting, done } = this.state;\n        return (\n            <div>\n                <select\n                    value={this.state.algo}\n                    onChange={e => this.setState({ algo: e.target.value })}\n                >\n                    <option value=\"bubble\">bubble</option>\n                    <option value=\"quick\">quick</option>\n                    <option value=\"merge\">merge</option>\n                    <option value=\"selection\">selection</option>\n                </select>\n                <button onClick={this.sort}>Sort</button>\n                <button onClick={this.randomNumbers}>Scramble</button>\n                <div>\n                    <h4\n                        style={{\n                            color: `${done ? \"green\" : sorting ? \"yellow\" : \"\"}`\n                        }}\n                    >\n                        {list.join(\", \")}\n                    </h4>\n                </div>\n            </div>\n        );\n    }\n}\n","export const bubbleSort = array => {\n    const allArrays = [];\n    let keepSwapping = true;\n    while (keepSwapping) {\n        keepSwapping = false;\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] > array[i + 1]) {\n                // SWAP\n                let temp = array[i + 1];\n                array[i + 1] = array[i];\n                array[i] = temp;\n                keepSwapping = true;\n                allArrays.push([...array]);\n            }\n        }\n    }\n    return allArrays;\n};\n","export const quickSort = (array, allParts = []) => {\n    if (array.length < 2) {\n        return { sorted: [...array], allParts };\n    }\n    const pivot = array.pop();\n    const smallerThanArray = [];\n    const largerThanArray = [];\n\n    array.forEach(n => {\n        if (n <= pivot) {\n            smallerThanArray.push(n);\n        } else {\n            largerThanArray.push(n);\n        }\n    });\n    const prevObj = quickSort(smallerThanArray, allParts);\n    const largObj = quickSort(largerThanArray, allParts);\n    const sorted = [...prevObj.sorted, pivot, ...largObj.sorted];\n    allParts.push(sorted);\n    return { sorted, allParts };\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Grid from \"./Components/Grid\";\nimport SortingAlgos from \"./Components/SortingAlgos\";\n\nconst PathFinder = () => (\n    <div>\n        <p>Pathfinder :)</p>\n        <Grid algo=\"test\"></Grid>\n    </div>\n);\n\nconst SortingAlgorithms = () => (\n    <div>\n        <p>SortingAlgorithms :)</p>\n        <SortingAlgos />\n    </div>\n);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Router>\n                    <div>\n                        <nav style={{ position: \"fixed\", top: 10, left: 100 }}>\n                            <ul>\n                                <li style={{ listStyle: \"none\" }}>\n                                    <Link to=\"/Pathfinding-Visualizer/\">\n                                        Path Finder\n                                    </Link>\n                                </li>\n                                <li style={{ listStyle: \"none\" }}>\n                                    <Link to=\"/Sorting\">\n                                        Sorting Algorithms\n                                    </Link>\n                                </li>\n                            </ul>\n                        </nav>\n\n                        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                        <Switch>\n                            <Route path=\"/Sorting\">\n                                <SortingAlgorithms />\n                            </Route>\n                            <Route path=\"/\">\n                                <PathFinder />\n                            </Route>\n                        </Switch>\n                    </div>\n                </Router>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}